{"version":3,"sources":["components/NewTask.js","components/TasksList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTask","newTask","handleChange","handleSubmit","onSubmit","name","placeholder","value","title","onChange","description","type","TasksList","allTasks","handleDelete","map","id","onClick","log","console","App","useState","setNewTask","setAllTasks","target","prevNewTask","event","prevTasks","Math","random","preventDefault","idToRemove","filter","item","index","arr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAEe,SAASA,EAAT,GAA2D,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACvD,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEE,KAAK,QACLC,YAAY,WACZC,MAAON,EAAQO,OAAS,GACxBC,SAAUP,IAEVD,EAAQO,MACR,qCACE,0BACEH,KAAK,cACLC,YAAY,aACZC,MAAON,EAAQS,aAAe,GAC9BD,SAAUP,IAEZ,wBAAQS,KAAK,SAAb,yBARc,QCTT,SAASC,EAAT,GAAgD,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAC5C,OACE,6BACGD,EAASE,KAAI,gBAAGP,EAAH,EAAGA,MAAOE,EAAV,EAAUA,YAAaM,EAAvB,EAAuBA,GAAvB,OACZ,+BACE,gCACE,6BAAKR,IACL,wBAAQS,QAAS,kBAAMH,EAAaE,IAApC,kBAEAN,EAAqB,4BAAIA,IAAX,OALTM,Q,ICFVE,EAAOC,QAAPD,IAEQ,SAASE,IAAM,MAEIC,mBAAS,IAFb,mBAEnBpB,EAFmB,KAEVqB,EAFU,OAGMD,mBAAS,IAHf,mBAGnBR,EAHmB,KAGTU,EAHS,KA6B1B,OACI,iCACI,uCACA,cAACvB,EAAD,CACIC,QAASA,EACTC,aA7BS,SAAC,GAAgB,IAAdsB,EAAa,EAAbA,OACZnB,EAAgBmB,EAAhBnB,KAAME,EAAUiB,EAAVjB,MACde,GAAW,SAACG,GAAD,mBAAC,eACLA,GADI,kBAENpB,EAAOE,QA0BJJ,aAtBS,SAACuB,GAClBH,GAAY,SAACI,GACT,MAAM,GAAN,mBAAWA,GAAX,4BACO1B,GADP,IAEIe,GAAIY,KAAKC,gBAGjBH,EAAMI,oBAiBF,cAAClB,EAAD,CAAWC,SAAUA,EAAUC,aAdlB,SAACiB,GAAD,OACjBR,GAAY,SAACI,GAET,OADAT,EAAIS,GACGA,EAAUK,QAAO,SAACC,EAAMC,EAAOC,GAAd,OAAsBF,EAAKjB,KAAOe,cChCtE,IAYeK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6145a40.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function NewTask({ newTask, handleChange, handleSubmit }) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"title\"\n        placeholder=\"New task\"\n        value={newTask.title || \"\"}\n        onChange={handleChange}\n      />\n      {!newTask.title ? null : (\n        <>\n          <textarea\n            name=\"description\"\n            placeholder=\"Details...\"\n            value={newTask.description || \"\"}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">Add Task</button>\n        </>\n      )}\n    </form>\n  );\n}\n","import React from \"react\";\n\nexport default function TasksList({ allTasks, handleDelete }) {\n  return (\n    <ul>\n      {allTasks.map(({ title, description, id }) => (\n        <li key={id}>\n          <div>\n            <h2>{title}</h2>\n            <button onClick={() => handleDelete(id)}>X</button>\n          </div>\n          {!description ? null : <p>{description}</p>}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport NewTask from \"./components/NewTask\";\nimport TasksList from \"./components/TasksList\";\nconst {log} = console;\n\nexport default function App() {\n    // hook your code up here ;)\n    const [newTask, setNewTask] = useState({});\n    const [allTasks, setAllTasks] = useState([]);\n\n    const handleChange = ({ target }) => {\n        const { name, value } = target;\n        setNewTask((prevNewTask) => ({\n            ...prevNewTask,\n            [name]: value,\n        }));\n    };\n\n    const handleSubmit = (event) => {\n        setAllTasks((prevTasks) => {\n            return [...prevTasks, {\n                ...newTask,\n                id: Math.random()\n            }]\n        });\n        event.preventDefault();\n    };\n\n    const handleDelete = (idToRemove) =>\n        setAllTasks((prevTasks) =>{\n            log(prevTasks)\n            return prevTasks.filter((item, index, arr) => item.id !== idToRemove)\n        });\n\n    return (\n        <main>\n            <h1>Tasks</h1>\n            <NewTask\n                newTask={newTask}\n                handleChange={handleChange}\n                handleSubmit={handleSubmit}\n            />\n            <TasksList allTasks={allTasks} handleDelete={handleDelete} />\n        </main>\n    );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}